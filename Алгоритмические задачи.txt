#1
class Student:
    def __init__(self, name, age, average_grade):
        self.name = name
        self.age = age
        self.average_grade = average_grade

    def get_name(self):
        return self.name

    def set_name(self, name):
        self.name = name

    def get_age(self):
        return self.age

    def set_age(self, age):
        self.age = age

    def get_average_grade(self):
        return self.average_grade

    def set_average_grade(self, average_grade):
        self.average_grade = average_grade

student = Student("Иван Иванов", 20, 4.5)

print(student.get_name())  

student.set_name("Петр Петров")

print(student.get_name())  

#2
class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def get_length(self):
        return self.length

    def set_length(self, length):
        self.length = length

    def get_width(self):
        return self.width

    def set_width(self, width):
        self.width = width

    def get_area(self):
        return self.length * self.width

    def get_perimeter(self):
        return 2 * (self.length + self.width)

rectangle = Rectangle(5, 3)

print(rectangle.get_length())  
print(rectangle.get_width())   

print(rectangle.get_area())    

print(rectangle.get_perimeter())  

rectangle.set_length(8)

rectangle.set_width(6)

print(rectangle.get_length())  
print(rectangle.get_width())   

print(rectangle.get_area())  

print(rectangle.get_perimeter())  

#3
class Car:
    def __init__(self, brand, model, year, mileage):
        self.brand = brand
        self.model = model
        self.year = year
        self.mileage = mileage

    def get_brand(self):
        return self.brand

    def set_brand(self, brand):
        self.brand = brand

    def get_model(self):
        return self.model

    def set_model(self, model):
        self.model = model

    def get_year(self):
        return self.year

    def set_year(self, year):
        self.year = year

    def get_mileage(self):
        return self.mileage

    def set_mileage(self, mileage):
        self.mileage = mileage

car = Car("Toyota", "Camry", 2022, 5000)

print(car.get_brand())    
print(car.get_model())    
print(car.get_year())     
print(car.get_mileage())  

car.set_brand("Honda")
car.set_model("Accord")
car.set_year(2020)
car.set_mileage(10000)

print(car.get_brand())    
print(car.get_model())   
print(car.get_year())     
print(car.get_mileage())  

#4
class BankAccount:
    def __init__(self, client, balance=0):
        self.client = client
        self.balance = balance

    def get_client(self):
        return self.client

    def get_balance(self):
        return self.balance

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
        else:
            print("Недостаточно средств на счете")

account = BankAccount("John Doe")

print(account.get_client())  

print(account.get_balance())  

account.deposit(100)

print(account.get_balance())  

account.withdraw(50)
print(account.get_balance()) 

account.withdraw(100)

# Вывод сообщения о недостаточности средств на счете
# Вывод: Недостаточно средств на счете

#5
class Triangle:
    def __init__(self, side1, side2, side3):
        self.side1 = side1
        self.side2 = side2
        self.side3 = side3

    def get_side1(self):
        return self.side1

    def get_side2(self):
        return self.side2

    def get_side3(self):
        return self.side3

    def set_side1(self, side1):
        self.side1 = side1

    def set_side2(self, side2):
        self.side2 = side2

    def set_side3(self, side3):
        self.side3 = side3

    def get_triangle_type(self):
        if self.side1 == self.side2 == self.side3:
            return "равносторонний"
        elif self.side1 == self.side2 or self.side1 == self.side3 or self.side2 == self.side3:
            return "равнобедренный"
        else:
            return "разносторонний"

    def get_area(self):
        s = (self.side1 + self.side2 + self.side3) / 2
        area = (s * (s - self.side1) * (s - self.side2) * (s - self.side3)) ** 0.5
        return area

triangle = Triangle(5, 5, 5)

print(triangle.get_side1())   
print(triangle.get_side2())   
print(triangle.get_side3())   

print(triangle.get_triangle_type())  

print(triangle.get_area())   

triangle.set_side1(6)
triangle.set_side2(7)
triangle.set_side3(8)

print(triangle.get_side1())   
print(triangle.get_side2())   
print(triangle.get_side3())   

print(triangle.get_triangle_type())   

print(triangle.get_area())   # Вывод: 20.33316256758894



